# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /home/nate/Downloads/gtest-1.6.0

# Where to find user code.
SRC_DIR = src

# location of output files
BUILD_DIR = build

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g #-Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = $(BUILD_DIR)/node_test $(BUILD_DIR)/dijkstra_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.
all: $(TESTS)

# remove all binaries
clean:
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(BUILD_DIR)/gtest-all.o: $(GTEST_SRCS_) | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -pthread -c $(GTEST_DIR)/src/gtest-all.cc -o $@

$(BUILD_DIR)/gtest_main.o: $(GTEST_SRCS_) | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -pthread -c $(GTEST_DIR)/src/gtest_main.cc -o $@

$(BUILD_DIR)/gtest.a: $(BUILD_DIR)/gtest-all.o | $(BUILD_DIR)
	$(AR) $(ARFLAGS) $@ $^ 

$(BUILD_DIR)/gtest_main.a: $(BUILD_DIR)/gtest-all.o $(BUILD_DIR)/gtest_main.o | $(BUILD_DIR)
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
$(BUILD_DIR)/Node.o: $(SRC_DIR)/Node.cpp $(SRC_DIR)/Node.h | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread -c $(SRC_DIR)/Node.cpp -o $@

$(BUILD_DIR)/Node_test.o: $(SRC_DIR)/Node_test.cpp $(SRC_DIR)/Node.h $(GTEST_HEADERS) | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread -c $(SRC_DIR)/Node_test.cpp -o $@

$(BUILD_DIR)/dijkstra_test.o: $(SRC_DIR)/dijkstra_test.cpp $(SRC_DIR)/Node.h $(GTEST_HEADERS) | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread -c $(SRC_DIR)/dijkstra_test.cpp -o $@

$(BUILD_DIR)/dijkstra_test: $(BUILD_DIR)/Node.o $(BUILD_DIR)/dijkstra_test.o $(BUILD_DIR)/gtest_main.a | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

$(BUILD_DIR)/node_test: $(BUILD_DIR)/Node.o $(BUILD_DIR)/Node_test.o $(BUILD_DIR)/gtest_main.a | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@

$(BUILD_DIR)/sort_test: $(SRC_DIR)/sort_test.cpp $(BUILD_DIR)/gtest_main.a | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $@
    
# put everything in a separate build directory
$(BUILD_DIR): 
	mkdir -p $@
